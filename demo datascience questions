{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNvcAZV8ZGR6IZGYttjIUPK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/moyilpapa/CSEC_ASTU/blob/main/demo%20datascience%20questions\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ouv-1II1gv8a"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1)\n",
        " A list is a collection of mutable items(elements).\n",
        " A dictionary is a collection of items which value referenced by a key.\n",
        " A numpy is a library which makes implementation easy for and matrix."
      ],
      "metadata": {
        "id": "v6uH4TY2hgYm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#2\n",
        "import math\n",
        "x= [10, 15, 20, 25, 30]\n",
        "for i in x:\n",
        "    if i%2==0:\n",
        "        print (pow(i,2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "K61XTq-5ji0h",
        "outputId": "34536b05-f8a5-4e85-c0c0-7e85a8945b19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n",
            "400\n",
            "900\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) output: [1,2,3,4]\n"
      ],
      "metadata": {
        "id": "s2CxAGoYkUWG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The DataFrame's dimensions are provided as a tuple by the.shape function: (number of columns, number of rows)\n",
        "\n",
        "All numeric columns' summary statistics are provided by.describe():count (entries that are not null),mean,Standard deviation, or stdminimum, 25%, 50%, 75%, and maximum\n"
      ],
      "metadata": {
        "id": "p0HEUL0DmLmi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#4\n",
        "import pandas as pd\n",
        "\n",
        "Student_file = {'NAME': ['ALI', 'YIDIDYA', 'YETMGETA', 'SHIMELIS'],\n",
        "                'AGE': [20, 20, 21, 19],\n",
        "                'GRADE': ['A', 'C+', 'A', 'D']}\n",
        "\n",
        "STUDENT_FILE = pd.DataFrame(Student_file)\n",
        "\n",
        "print(STUDENT_FILE.shape)\n",
        "print(STUDENT_FILE.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "gwEuFMDbmOPE",
        "outputId": "dbe1f26a-a161-4e92-ced2-005ac972a49d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4, 3)\n",
            "             AGE\n",
            "count   4.000000\n",
            "mean   20.000000\n",
            "std     0.816497\n",
            "min    19.000000\n",
            "25%    19.750000\n",
            "50%    20.000000\n",
            "75%    20.250000\n",
            "max    21.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "import pandas as pd\n",
        "csv_content = \"\"\"Month,1958,1959,1960\n",
        "JAN,340,360,417\n",
        "FEB,318,342,391\n",
        "MAR,362,406,419\n",
        "APR,348,396,461\n",
        "MAY,363,420,472\n",
        "JUN,435,472,535\n",
        "JUL,491,548,622\n",
        "AUG,505,559,606\n",
        "SEP,404,463,508\n",
        "OCT,359,407,461\n",
        "NOV,310,362,390\n",
        "DEC,337,405,432\n",
        "\"\"\"\n",
        "with open(\"airtravel.csv\", \"w\") as file:\n",
        "    file.write(csv_content)\n",
        "\n",
        "\n",
        " #Display the first 5 rows of the airtravel.csv file directly\n",
        "print(pd.read_csv('airtravel.csv').head())\n",
        "#.head() print the first row in a list\n",
        "\n",
        "#Rows represent months (Jan–Dec).\n",
        "#Columns are for years (1958, 1959, 1960).\n",
        "#It's a broad table: each year is its own column, not a single \"Year\" column and a \"Passengers\" column\n",
        "#Every month sees an annual rise in passenger counts (e.g., January goes 340 –– 360 –– 417\n",
        "#Summer months (Jun–Aug) see more traffic than winter months, revealing a clear seasonal trend.\n",
        "#Every number is an integer—counts, most likely in thousands.\n"
      ],
      "metadata": {
        "id": "3Gaz7BmfraMT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9eafaa5d-5fcd-460e-8a01-74045ef23f5d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Month  1958  1959  1960\n",
            "0   JAN   340   360   417\n",
            "1   FEB   318   342   391\n",
            "2   MAR   362   406   419\n",
            "3   APR   348   396   461\n",
            "4   MAY   363   420   472\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6\n",
        "import pandas as pd\n",
        "\n",
        "# Step 1: Create the CSV file\n",
        "csv_content = \"\"\"Month,1958,1959,1960\n",
        "JAN,340,360,417\n",
        "FEB,318,342,391\n",
        "MAR,362,406,419\n",
        "APR,348,396,461\n",
        "MAY,363,420,472\n",
        "JUN,435,472,535\n",
        "JUL,491,548,622\n",
        "AUG,505,559,606\n",
        "SEP,404,463,508\n",
        "OCT,359,407,461\n",
        "NOV,310,362,390\n",
        "DEC,337,405,432\n",
        "\"\"\"\n",
        "with open(\"airtravel.csv\", \"w\") as file:\n",
        "    file.write(csv_content)\n",
        "\n",
        "# Step 2: Load the CSV\n",
        "at = pd.read_csv(\"airtravel.csv\")\n",
        "\n",
        "# Step 3: Calculate total passengers for each month across all years\n",
        "at['Total'] = at[['1958', '1959', '1960']].sum(axis=1)\n",
        "\n",
        "# Step 4: Find desired months\n",
        "highest = at.loc[at['Total'].idxmax()]\n",
        "lowest_1958 = at.loc[at['1958'].idxmin()]\n",
        "\n",
        "# Step 5: Print results\n",
        "print(f\"Month with highest total passengers: {highest['Month']} ({highest['Total']} thousand)\")\n",
        "print(f\"Month with lowest passengers in 1958: {lowest_1958['Month']} ({lowest_1958['1958']} thousand)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h06koPSIELe5",
        "outputId": "a0200a41-ef08-415d-f322-dcb8a1cb1bac"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Month with highest total passengers: AUG (1670 thousand)\n",
            "Month with lowest passengers in 1958: NOV (310 thousand)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#7 A .groupby() used to group data by  calling some functions"
      ],
      "metadata": {
        "id": "trUHP0fTH4ee"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "Student_file = {\n",
        "    'NAME': ['ALI', 'YIDIDYA', 'YETMGETA', 'SHIMELIS'],\n",
        "    'AGE': [20, 20, 21, 19],\n",
        "    'GRADE': ['A', 'C+', 'A', 'D']\n",
        "}\n",
        "\n",
        "STUDENT_FILE = pd.DataFrame(Student_file)\n",
        "\n",
        "grouped = STUDENT_FILE.groupby('GRADE')['NAME'].count()\n",
        "print(grouped)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "6_hlytVtIVcR",
        "outputId": "bbc83748-90ad-4722-f861-d1a3caec1064"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GRADE\n",
            "A     2\n",
            "C+    1\n",
            "D     1\n",
            "Name: NAME, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8\n",
        "import pandas as pd\n",
        "from io import StringIO\n",
        "\n",
        "# Sample Titanic data from seabeans\n",
        "data = \"\"\"\n",
        "PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\n",
        "1,0,3,Braund, Mr. Owen Harris,male,22,1,0,A/5 21171,7.25,,S\n",
        "2,1,1,Cumings, Mrs. John Bradley (Florence Briggs Thayer),female,38,1,0,PC 17599,71.2833,C85,C\n",
        "3,1,3,Heikkinen, Miss. Laina,female,26,0,0,STON/O2. 3101282,7.925,,S\n",
        "4,1,1,Futrelle, Mrs. Jacques Heath (Lily May Peel),female,35,1,0,113803,53.1,C123,S\n",
        "5,0,3,Allen, Mr. William Henry,male,35,0,0,373450,8.05,,S\n",
        "6,0,3,Moran, Mr. James,male,0,0,0,330877,8.4583,,Q\n",
        "7,0,1,McCarthy, Mr. Timothy J,male,54,0,0,17463,51.8625,E46,S\n",
        "8,0,3,Palsson, Master. Gosta Leonard,male,2,3,1,349909,21.075,,S\n",
        "9,1,3,Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg),female,27,0,2,347742,11.1333,,S\n",
        "10,1,2,Nasser, Mrs. Nicholas (Adele Achem),female,14,1,0,237736,30.0708,,C\n",
        "11,1,3,Sandstrom, Miss. Marguerite Rut,female,4,1,1,PP 9549,16.7,G6,S\n",
        "12,1,1,Bonnell, Miss. Elizabeth,female,58,0,0,113783,26.55,C103,S\n",
        "13,0,3,Saundercock, Mr. William Henry,male,20,0,0,A/5. 2151,8.05,,S\n",
        "14,0,3,Andersson, Mr. Anders Johan,male,39,1,5,347082,31.275,,S\n",
        "15,0,3,Vestrom, Miss. Hulda Amanda Adolfina,female,14,0,0,350406,7.8542,,S\n",
        "16,1,2,Hewlett, Mrs. (Mary D Kingcome),female,55,0,0,248706,16,,S\n",
        "17,0,3,Rice, Master. Eugene,male,2,4,1,382652,29.125,,Q\n",
        "18,1,2,Williams, Mr. Charles Duane,male,0,1,1,244373,13,,S\n",
        "19,0,3,Van Impe, Mr. Jean Baptiste,male,36,0,0,345777,9.5,,S\n",
        "20,1,3,Johnson, Miss. Eleanor Ileen,female,23,1,0,347742,7.8542,,S\n",
        "\"\"\"\n",
        "\n",
        "# Load the data\n",
        "df = pd.read_csv(StringIO(data))\n",
        "\n",
        "# Display missing values in each column\n",
        "print(\"Missing values per column:\")\n",
        "print(df.isnull().sum())\n"
      ],
      "metadata": {
        "id": "cx5eYQpsPbqH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#9\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt  # needed for plotting\n",
        "\n",
        "Student_file = {\n",
        "    'NAME': ['ALI', 'YIDIDYA', 'YETMGETA', 'SHIMELIS'],\n",
        "    'AGE': [20, 20, 21, 19],\n",
        "    'GRADE': ['A', 'C+', 'A', 'D']\n",
        "}\n",
        "\n",
        "STUDENT_FILE = pd.DataFrame(Student_file)\n",
        "\n",
        "print(STUDENT_FILE.shape)       # Output: (4, 3)\n",
        "print(STUDENT_FILE.describe())  # Summary stats for AGE only (numerical)\n",
        "\n",
        "# Visualization\n",
        "STUDENT_FILE[\"AGE\"].hist()\n",
        "plt.title(\"Age Distribution\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "collapsed": true,
        "id": "j_kBHc-BQQ0C",
        "outputId": "a82b5d53-2458-42fc-f460-222bacb27bce"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4, 3)\n",
            "             AGE\n",
            "count   4.000000\n",
            "mean   20.000000\n",
            "std     0.816497\n",
            "min    19.000000\n",
            "25%    19.750000\n",
            "50%    20.000000\n",
            "75%    20.250000\n",
            "max    21.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#9\n",
        "In general:\n",
        "\n",
        "Right skew (tail to the right) might happen if most students are younger, with a few older ones.\n",
        "\n",
        "Left skew (tail to the left) might happen if most are older, with a few very young students.\n",
        "\n",
        "But here, there's no significant skew — the dataset is too small and the ages are close together.\n",
        "\n",
        " Possible reasons for skew (if seen in larger datasets):\n",
        "Uneven admission ages\n",
        "\n",
        "Early or late graduation\n",
        "\n",
        "Outliers (older/younger students)\n",
        "\n",
        "Special programs for younger or older students\n"
      ],
      "metadata": {
        "id": "sRZSdW1BQ5mC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#11\n",
        "import pandas as pd\n",
        "\n",
        "# Low std. dev: values close to each other\n",
        "low_std = [50, 51, 49, 50, 50]\n",
        "\n",
        "# High std. dev: values are spread out\n",
        "high_std = [10, 90, 5, 95, 50]\n",
        "\n",
        "# Create a DataFrame\n",
        "df = pd.DataFrame({\n",
        "    'Low_STD': low_std,\n",
        "    'High_STD': high_std\n",
        "})\n",
        "\n",
        "print(df.describe())\n"
      ],
      "metadata": {
        "id": "YqN__SS1Rq_H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1. Medical Diagnosis\n",
        "Missing test results or symptoms can lead to incorrect diagnoses or unsafe treatments.\n",
        "\n",
        "2. Credit Scoring\n",
        "Missing income or credit history can result in unfair loan decisions or inaccurate risk assessment."
      ],
      "metadata": {
        "id": "6EsvW13XSH7L"
      }
    }
  ]
}